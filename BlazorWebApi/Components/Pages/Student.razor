@* @page "/students"
@using BlazorWebApi.Services
@using BlazorWebApi.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@inject StudentServices StudentService


<h3>Students</h3>

@if (students == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Age</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.Id</td>
                    <td>@student.Name</td>
                    <td>@student.Age</td>
                    <td>
                        <button @onclick="() => EditStudent(student)">Edit</button>
                        <button @onclick="() => DeleteStudent(student.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="AddStudent">Add New Student</button>

@if (currentStudent != null)
{
    <EditForm Model="currentStudent" OnValidSubmit="SaveStudent">
        <InputText @bind-Value="currentStudent.Name" placeholder="Name" />
        <InputNumber @bind-Value="currentStudent.Age" placeholder="Age" />
        <button type="submit">Save</button>
    </EditForm>
}

@code {
    private List<Student> students;
    private Student currentStudent;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetStudentsAsync();
    }

    private void AddStudent()
    {
        currentStudent = new Student();
    }

    private void EditStudent(Student student)
    {
        currentStudent = student;
    }

    private async Task SaveStudent()
    {
        if (currentStudent.Id == 0)
        {
            await StudentService.AddStudentAsync(currentStudent);
        }
        else
        {
            await StudentService.UpdateStudentAsync(currentStudent);
        }

        students = await StudentService.GetStudentsAsync();
        currentStudent = null;
    }

    private async Task DeleteStudent(int id)
    {
        await StudentService.DeleteStudentAsync(id);
        students = await StudentService.GetStudentsAsync();
    }
}
 *@